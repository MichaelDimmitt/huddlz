defmodule Huddlz.Repo.Migrations.AddGroupsAndGroupMembers do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:huddlz) do
      add :group_id, :uuid
    end

    create table(:groups, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:huddlz) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "huddlz_group_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    alter table(:groups) do
      add :name, :text, null: false
      add :description, :text
      add :location, :text
      add :image_url, :text
      add :is_public, :boolean, null: false, default: true

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id,
          references(:users,
            column: :id,
            name: "groups_owner_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:groups, [:name], name: "groups_unique_name_index")

    create table(:group_members, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :role, :text, null: false, default: "member"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :group_id,
          references(:groups,
            column: :id,
            name: "group_members_group_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "group_members_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:group_members, [:group_id, :user_id],
             name: "group_members_unique_group_user_index"
           )
  end

  def down do
    drop_if_exists unique_index(:group_members, [:group_id, :user_id],
                     name: "group_members_unique_group_user_index"
                   )

    drop constraint(:group_members, "group_members_group_id_fkey")

    drop constraint(:group_members, "group_members_user_id_fkey")

    drop table(:group_members)

    drop_if_exists unique_index(:groups, [:name], name: "groups_unique_name_index")

    drop constraint(:groups, "groups_owner_id_fkey")

    alter table(:groups) do
      remove :owner_id
      remove :updated_at
      remove :created_at
      remove :is_public
      remove :image_url
      remove :location
      remove :description
      remove :name
    end

    drop constraint(:huddlz, "huddlz_group_id_fkey")

    alter table(:huddlz) do
      modify :group_id, :uuid
    end

    drop table(:groups)

    alter table(:huddlz) do
      remove :group_id
    end
  end
end
