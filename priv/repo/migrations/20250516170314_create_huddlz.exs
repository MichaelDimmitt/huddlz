defmodule Huddlz.Repo.Migrations.CreateHuddlz do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :display_name, :text
      add :role, :text, null: false, default: "regular"
    end

    create index(:users, ["email gin_trgm_ops"], name: "users_email_gin_index", using: "GIN")

    create table(:huddlz, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :description, :text
      add :starts_at, :utc_datetime, null: false
      add :ends_at, :utc_datetime
      add :thumbnail_url, :text
      add :status, :text, null: false, default: "upcoming"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :host_id,
          references(:users,
            column: :id,
            name: "huddlz_host_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false
    end

    create unique_index(:huddlz, [:host_id, :title], name: "huddlz_unique_title_per_host_index")
  end

  def down do
    drop_if_exists unique_index(:huddlz, [:host_id, :title],
                     name: "huddlz_unique_title_per_host_index"
                   )

    drop constraint(:huddlz, "huddlz_host_id_fkey")

    drop table(:huddlz)

    drop_if_exists index(:users, ["email gin_trgm_ops"], name: "users_email_gin_index")

    alter table(:users) do
      remove :role
      remove :display_name
    end
  end
end
